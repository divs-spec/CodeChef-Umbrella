https://www.codechef.com/problems/EQXY?tab=statement


üéØ Problem Summary
You are given four positive integers:

X: your current number

Y: the target number you want to make X equal to

Z: a helper number you can change

C: the cost (in coins) for changing Z by +1 or -1 (each step costs 1 coin)

Your goal is to make X equal to Y using the fewest possible coins.
You‚Äôre allowed to perform certain operations to help achieve this.

üîß Allowed Operations
You can do the following:

Change Z by +1 or -1:

Each change (increase or decrease) costs C coins.

You cannot decrease Z below 1.

If Y is divisible by X (i.e., Y % X == 0),
you are allowed to:

Change X to a multiple of Z that still divides Y.

This is the only way to change X, and it‚Äôs only allowed when Y is divisible by X.

‚ùì What‚Äôs the goal?
You want to make X equal to Y, either directly or by transforming it through allowed operations, and do so using the least total cost (coins).

üî¢ Example:
Input:

1
3 12 5 2
This means:

Start: X = 3

Target: Y = 12

Helper value: Z = 5

Cost to change Z by 1 = 2 coins

Now:

First check if X == Y ‚Üí No

Check if Y % X == 0 ‚Üí 12 % 3 == 0 ‚Üí Yes

So, allowed to try changing X (via Z) to another number X' such that:

X' is a divisor of Y (i.e., divides 12)

X' is a multiple of Z

For example:

Divisors of 12 are: 1, 2, 3, 4, 6, 12

We check if any of those divisors are also multiples of some Z' (modified version of Z), where the cost of changing Z ‚Üí Z' is minimal

The goal is to:

Find the best Z' such that it leads to some valid new X, and

Minimize total cost (changing Z by |Z' - Z| steps √ó C coins)

‚úÖ Strategy to Solve
If X == Y, print 0 (already equal, no cost).

Else, if Y % X != 0, you can't transform X via Z, so cost is always 2 * C:

First move: increase/decrease Z to something useful

Second move: change X and proceed

If Y % X == 0:

Check all divisors of Y

For each divisor d:

If d % X == 0 (valid replacement for X)

See if it‚Äôs possible to get to d by modifying Z

Cost = C + abs(d - Z)

Choose the minimum possible cost

üß† Constraints
1 ‚â§ T ‚â§ 1000 (number of test cases)

1 ‚â§ X, Y, Z, C ‚â§ 1e9

You need an efficient solution, especially for checking divisors, because numbers can be large.

üìå Final Task
For each test case, print the minimum coins required to make X equal to Y using the allowed operations.




CODE EXPLAINATION : 

This simplified Java program solves a problem where you are given four numbers: x, y, z, and c. Your goal is to make x equal to y using operations that involve changing a helper number z, with each operation costing c coins.

Logic:
If x is already equal to y, no cost is needed, so the answer is 0.

Otherwise, set an initial maximum cost as 2 * c ‚Äî assuming the worst-case scenario (changing z twice).

Make sure x is less than y by swapping them if needed (this simplifies checks).

If y is divisible by x, the program tries to find a number i such that:

i is a divisor of y

i is also a multiple of x

Adjusting z to i (or y/i) is cheapest

For every such valid divisor i, it checks how close it is to z, and computes the cost as c + |i - z|. The minimum of all such costs is kept as the answer.

Finally, it prints the minimum cost to perform the operation.

This approach is efficient and uses basic loops, conditionals, and math to compute the optimal result.









